// generated file
package org.cthul.log;

import org.slf4j.Logger;
import org.slf4j.Marker;
import static org.cthul.strings.Formatter.Format;

/**
 * Wraps a {@link Logger slf4j Logger}, which is the main user entry point of SLF4J API. 
 * It is expected that logging takes place through concrete implementations 
 * of {@code org.slf4j.Logger}.
 * <p/>
 * The following example was taken from the slf4j Logger documentation and
 * adapted to show how to use a Cthul Logger.
 *
 * <h3>Typical usage pattern:</h3>
 * <pre>
 * import org.cthul.log.CLogger;
 * import org.cthul.log.CLoggerFactory;
 * 
 * public class Wombat {
 *
 *   <span style="color:green">final static CLogger logger = CLoggerFactory.getLogger(Wombat.class);</span>
 *   Integer t;
 *   Integer oldT;
 *
 *   public void setTemperature(Integer temperature) {
 *     oldT = t;        
 *     t = temperature;
 *     <span style="color:green">logger.debug("Temperature set to %s. Old temperature was %s.", t, oldT);</span>
 *     if(temperature.intValue() > 50) {
 *       <span style="color:green">logger.info("Temperature has risen above 50 degrees.");</span>
 *     }
 *   }
 * }
 * </pre>
 * @author Arian Treffer
 */
public final class CLogger {
    
    private final Logger logger;
    private final CLogConfiguration conf;

    public CLogger(Logger logger) {
        this(logger, CLogConfiguration.getDefault());
    }
    
    public CLogger(Logger logger, CLogConfiguration conf) {
        CLoggerFix.fix(logger);
        this.logger = logger;
        this.conf = conf;
    }
    
<#macro params c>
<#if (c > 0)><#list 1..c as i>, Object arg${i}</#list><#elseif c == 0>, Object... args</#if></#macro>
<#macro args c>
<#if (c > 0)><#list 1..c as i>, arg${i}</#list><#elseif c == 0>, args</#if></#macro>
<#macro pItem s c x>
<#if (c > 0)><#if (x < 0)>, </#if>${s}<#if x==1>, </#if></#if></#macro>
<#macro paramT c x=1>
<@pItem "Throwable throwable" c x/></#macro>
<#macro argT c x=1>
<@pItem "throwable" c x/></#macro>
<#macro paramM c x=1>
<@pItem "Marker marker" c x/></#macro>
<#macro argM c x=1>
<@pItem "marker" c x/></#macro>
<#assign levels = ["trace", "debug", "info", "warn", "error"]>
<#assign Levels = ["Trace", "Debug", "Info", "Warn", "Error"]>
<#assign maxArgC = 3>
<#list levels as level>
 <#list 0..1 as m>
    /**
     * Is the logger instance enabled for the ${level} level?
<#if (m > 0)>
     * The marker data is taken into account.
     * @param marker The marker data to take into consideration
</#if>
     * @return True if this CLogger is enabled for the ${level} level,
     * false otherwise.
     */
    public boolean ${level}(<@paramM m 0/>) {
        return logger.is${Levels[level_index]}Enabled(<@argM m 0/>);
    }

    /**
     * Is the logger instance enabled for the ${level} level?
<#if (m > 0)>
     * The marker data is taken into account.
     * @param marker The marker data to take into consideration
</#if>
     * @return True if this CLogger is enabled for the ${level} level,
     * false otherwise.
     */    
    public boolean is${Levels[level_index]}Enabled(<@paramM m 0/>) {
        return logger.is${Levels[level_index]}Enabled(<@argM m 0/>);
    }

 </#list>
</#list>
<#list levels as level>
 <#list 0..1 as m>
  <#list 0..1 as t>
   <#list -1..maxArgC as argC>
    /**
     * Log <#if (t > 0)>an exception <#else>a message </#if><#if (m > 0)>with the specific Marker </#if>at the ${level} level<#if (argC >=0)>, according to the specified format and arguments</#if>.
     * 
<#if (m > 0)>
     * @param marker the marker data specific to this log statement
</#if>
<#if (t > 0)>
     * @param throwable the throwable to log
</#if>
<#if (argC < 0)>
     * @param message the message string to be logged
<#else>
     * @param message the format string
 <#if (argC == 0)>
     * @param args an array of arguments
 <#else>
  <#list 1..argC as i>
     * @param arg${i} argument ${i}
  </#list>
 </#if>
</#if>
     */
    public void ${level}(<@paramM m/><@paramT t/>Object message<@params argC/>) {
        if (${level}(<@argM m 0/>)) {
<#if (argC < 0 && t == 0)>
            if (message instanceof Throwable) {
                logger.${level}(<@argM m/>String.valueOf(message), (Throwable) message);
            } else {
                logger.${level}(<@argM m/>String.valueOf(message));
            }
<#else>
            logger.${level}(<@argM m/>Format(conf, <@argT t/>String.valueOf(message)<@args argC/>)<@argT t, -1/>);
</#if>
        }
    }

   </#list>
  </#list>
 </#list>
</#list>
<#list 0..1 as m>
    /**
     * Is the logger instance enabled for the given level?
<#if (m > 0)>
     * The marker data is taken into account.
</#if>
     * @param level the log level
<#if (m > 0)>
     * @param marker The marker data to take into consideration
</#if>
     * @return True if this CLogger is enabled for the given level,
     * false otherwise.
     */
    public boolean isEnabled(CLogLevel level<@paramM m, -1/>) {
        switch (level) {
 <#list levels as level>
            case ${Levels[level_index]}:
                return is${Levels[level_index]}Enabled(<@argM m 0/>);
 </#list>
            default:
                throw new IllegalArgumentException(level.toString());
        }
    }

</#list>
<#list 0..1 as m>
 <#list 0..1 as t>
  <#list -1..maxArgC as argC>
    /**
     * Log <#if (t > 0)>an exception <#else>a message </#if><#if (m > 0)>with the specific Marker </#if>at the given level<#if (argC >=0)>, according to the specified format and arguments</#if>.
     * 
     * @param level the log level
<#if (m > 0)>
     * @param marker the marker data specific to this log statement
</#if>
<#if (t > 0)>
     * @param throwable the throwable to log
</#if>
<#if (argC < 0)>
     * @param message the message string to be logged
<#else>
     * @param message the format string
 <#if (argC == 0)>
     * @param args an array of arguments
 <#else>
  <#list 1..argC as i>
     * @param arg${i} argument ${i}
  </#list>
 </#if>
</#if>
     */
    public void log(CLogLevel level, <@paramM m/><@paramT t/>Object message<@params argC/>) {
        switch (level) {
    <#list levels as level>
            case ${Levels[level_index]}:
                ${level}(<@argM m/><@argT t/>message<@args argC/>);
                break;
    </#list>            
            default:
                throw new IllegalArgumentException(level.toString());
        }
    }

  </#list>
 </#list>
</#list>
}
